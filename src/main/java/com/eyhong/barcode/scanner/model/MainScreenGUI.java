package com.eyhong.barcode.scanner.model;

import com.eyhong.barcode.scanner.ApplicationEnum;
import com.eyhong.barcode.scanner.factory.InventoryScannerFactory;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

@Component
public class MainScreenGUI extends JFrame {
    private JLabel cartImage;
    private JPanel buttonPanel;
    private JLabel priceScanButton;
    private JLabel inventoryButton;
    private JLabel exitButton;
    private JLabel mainTitle;
    private JPanel panel1;

    public MainScreenGUI() {
        setContentPane(panel1);


        priceScanButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                priceScanButton.setIcon(new ImageIcon(getClass().getResource("/buttons/priceScanHover.png")));
            }
        });
        priceScanButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                priceScanButton.setIcon(new ImageIcon(getClass().getResource("/buttons/PriceScanButton.png")));
            }
        });
        priceScanButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (onButton(e, priceScanButton))
                    setDisplay(ApplicationEnum.SCAN);
            }
        });

        //INVENTORY BUTTON
        inventoryButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                inventoryButton.setIcon(new ImageIcon(getClass().getResource("/buttons/inventoryHover.png")));
            }
        });
        inventoryButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                inventoryButton.setIcon(new ImageIcon(getClass().getResource("/buttons/InventoryButton.png")));
            }
        });
        inventoryButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (onButton(e, inventoryButton))
                    setDisplay(ApplicationEnum.ADD);
            }
        });

        // EXIT BUTTON
        exitButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                exitButton.setIcon(new ImageIcon(getClass().getResource("/buttons/exitHover.png")));
            }
        });
        exitButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                exitButton.setIcon(new ImageIcon(getClass().getResource("/buttons/ExitButton.png")));
            }
        });
        exitButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (onButton(e, exitButton))
                    System.exit(0);
            }
        });
    }

    private boolean onButton(MouseEvent e, JLabel button) {
        return e.getPoint().getX() >= 0 && e.getPoint().getY() >= 0 &&
                e.getPoint().getX() <= button.getWidth() && e.getPoint().getY() <= button.getHeight();
    }

    public void displayUI() {
        setTitle("Price Scanner Application");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setVisible(true);
    }

    private void setDisplay(ApplicationEnum applicationEnum) {
        InventoryScannerFactory.getInstance(applicationEnum).displayUI();
        setVisible(false);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setBackground(new Color(-1));
        cartImage = new JLabel();
        cartImage.setBackground(new Color(-1));
        cartImage.setHorizontalAlignment(0);
        cartImage.setIcon(new ImageIcon(getClass().getResource("/images/cart.jpg")));
        cartImage.setText("");
        panel1.add(cartImage, BorderLayout.CENTER);
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        buttonPanel.setBackground(new Color(-1));
        buttonPanel.setForeground(new Color(-4473925));
        panel1.add(buttonPanel, BorderLayout.SOUTH);
        priceScanButton = new JLabel();
        priceScanButton.setIcon(new ImageIcon(getClass().getResource("/buttons/PriceScanButton.png")));
        priceScanButton.setText("");
        buttonPanel.add(priceScanButton);
        inventoryButton = new JLabel();
        inventoryButton.setIcon(new ImageIcon(getClass().getResource("/buttons/InventoryButton.png")));
        inventoryButton.setText("");
        buttonPanel.add(inventoryButton);
        exitButton = new JLabel();
        exitButton.setIcon(new ImageIcon(getClass().getResource("/buttons/ExitButton.png")));
        exitButton.setText("");
        buttonPanel.add(exitButton);
        mainTitle = new JLabel();
        mainTitle.setBackground(new Color(-16777216));
        Font mainTitleFont = this.$$$getFont$$$("Berlin Sans FB", Font.BOLD, 26, mainTitle.getFont());
        if (mainTitleFont != null) mainTitle.setFont(mainTitleFont);
        mainTitle.setForeground(new Color(-16777216));
        mainTitle.setHorizontalAlignment(0);
        mainTitle.setText("Choose Your Application");
        panel1.add(mainTitle, BorderLayout.NORTH);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
